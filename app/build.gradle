plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'jacoco'
}


afterEvaluate { project ->
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses true
    }

    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    def count = 0

    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            count++
            System.out.println("count -> $count")

            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            def androidTestTaskName = "connected${sourceName.capitalize()}AndroidTest"
            System.out.println("testTaskName -> $testTaskName")
            System.out.println("androidTestTaskName -> $androidTestTaskName")
            System.out.println("sourcePath -> $sourcePath")

            task "${sourceName.capitalize()}CoverageReport"(type: JacocoReport, dependsOn: ["$testTaskName", "$androidTestTaskName"]) {
                group = "Reporting"
                description = "Generate Jacoco coverage reports for ${sourceName.capitalize()} build."

                def fileFilter = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        '**/*JsonAdapter.*',
                        '**/exclude/*'
//                        '**/yourModuleNameThatNeedsToBeExcluded/*'
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                classDirectories.from = files([javaTree], [kotlinTree])
                executionData.setFrom(fileTree(dir: project.projectDir, includes: ["**/*.exec", "**/*.ec"]))
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java"]

                sourceDirectories.setFrom(files(coverageSourceDirs))
                additionalSourceDirs.setFrom(files(coverageSourceDirs))

                reports {
                    html {
                        enabled true
                        
                        /*Here define your new directory for your final report,
                        else the default path of the report will be:
                        JaCoCoCodeCoverage/app/build/reports/jacoco/DevDebugCoverageReport/html/index.html*/

                        //destination file("${buildDir}/jacoco-final-report")
                    }
                    csv.enabled false
                    xml.enabled true

                }
            }
        }
    }
}
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.android.jacococodecoverage"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'default'
    productFlavors {
        qa {
            dimension = 'default'
            applicationIdSuffix = '.qa'
            resValue "string", "app_name", "JaCoCo Coverage-QA"
            versionCode Integer.parseInt('1')
            versionName '1.0.0'
        }
        dev {
            dimension = 'default'
            applicationIdSuffix = '.beta'
            resValue "string", "app_name", "JaCoCo Coverage-Beta"
            versionCode Integer.parseInt('1')
            versionName '1.0.0'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode true
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        animationsDisabled = true
        unitTests.all {
            jacoco {
                excludes = ['jdk.internal.*']
                includeNoLocationClasses = true
            }
        }
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'

}